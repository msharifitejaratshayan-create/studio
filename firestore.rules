/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy: This ruleset prioritizes security by strictly controlling access based on user identity.
 * It assumes a user-centric data model where most data is owned by individual users. It uses path-based
 * authorization for data stored directly under `/users/{userId}`. For top-level CSV documents, the rules
 * currently allow public read access but require authentication for any write operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Access is restricted to the owning user.
 * - /csv_data/{csvId}: Stores CSV data, where `csvId` is either "threads" or "non-threads". Read access is public, but write access is restricted to authenticated users.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Public read access is granted to the /csv_data/{csvId} collection. Write access requires authentication.
 * - Strict ownership is enforced for user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the current user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the current user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their profile.
     * @allow (get) User 'user123' can read their profile.
     * @allow (update) User 'user123' can update their profile.
     * @allow (delete) User 'user123' can delete their profile.
     * @deny (create) User 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for writes and reads within the /users collection.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for CSV documents.
     * @path /csv_data/{csvId}
     * @allow (get) Any user can read CSV data.
     * @allow (list) Any user can list CSV data.
     * @allow (create) Authenticated user can create CSV data.
     * @allow (update) Authenticated user can update CSV data.
     * @allow (delete) Authenticated user can delete CSV data.
     * @deny (create) Unauthenticated user cannot create CSV data.
     * @principle Allows public read access but requires authentication for writes in the /csv_data collection.
     */
    match /csv_data/{csvId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}